
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cmvkybinmfonxctjltwk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNtdmt5YmlubWZvbnhjdGpsdHdrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyNjA0MzQsImV4cCI6MjA1NzgzNjQzNH0.lBALOpj2fGFQ7MEfJQbxX7V9DPQBBh2CoFgT9iYJm0Q";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Custom query functions for tables not in the Database type
export const getCustomTable = (tableName: string) => {
  // Using any type to bypass TypeScript's type checking for dynamic table names
  return supabase.from(tableName as any);
};

// Helper function to safely handle data from custom tables
export const safelyParseCustomData = <T>(data: any): T[] => {
  if (!data || !Array.isArray(data)) {
    return [] as T[];
  }
  return data as T[];
};

// New helper function to properly handle custom query requests
export const fetchCustomTableData = async <T>(
  tableName: string, 
  options?: {
    filters?: Record<string, any>;
    range?: { from?: Date; to?: Date; field?: string };
  }
): Promise<{ data: T[]; error: any }> => {
  try {
    let query = getCustomTable(tableName).select('*');
    
    // Apply date range filters if provided
    if (options?.range) {
      const { from, to, field = 'timestamp' } = options.range;
      
      if (from) {
        query = query.gte(field, from.toISOString());
      }
      
      if (to) {
        query = query.lte(field, to.toISOString());
      }
    }
    
    // Apply any additional filters
    if (options?.filters) {
      Object.entries(options.filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          query = query.eq(key, value);
        }
      });
    }
    
    const { data, error } = await query;
    
    if (error) {
      console.error(`Error fetching ${tableName}:`, error);
      return { data: [], error };
    }
    
    return { data: safelyParseCustomData<T>(data), error: null };
  } catch (err) {
    console.error(`Unexpected error fetching ${tableName}:`, err);
    return { data: [], error: err };
  }
};
